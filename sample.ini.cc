// simple INI reader and writer. mit licensed
// - rlyeh

#include <map>
#include <string>
#include <sstream>
#include "wire.hpp"

// [section]
// key=value ;comment
struct INI : std::map< wire::string, wire::string > {

    INI() : std::map< wire::string, wire::string >()
    {}

    bool load( const std::string &text ) {
        *this = INI();
        wire::string section;
        for( auto &line : wire::string(text).tokenize("\r\n") ) {
            // remove comments, split line into tokens and parse tokens
            line = line.substr( 0, line.find_first_of(';') );
            wire::strings t = line.split("[]=");
            /**/ if( t.size() == 3 && t[0] == "[" && t[2] == "]" ) section = t[1];
            else if( t.size() == 3 && t[1] == "=" ) (*this)[section + "." + t[0]] = t[2];
            else return false;
        }
        return true;
    }

    std::string save() const {
        std::string output( "; auto-generated by ini class\r\n" ), section;
        for( auto &it : *this ) {
            wire::strings kv = it.first.tokenize(".");
            if( section != kv[0] ) {
                output += "\r\n[" + ( section = kv[0] ) + "]\r\n";
            }
            output += kv[1] + "=" + it.second + "\r\n";
        }
        return output;
    }
};

#include <iostream>
#include <cassert>

int main() {
    INI ini;
    ini.load( "[test]\nnumber=123\nstring=hello world;this is a comment" );

    assert( ini["test.number"] == 123 );
    assert( ini["test.string"] == "hello world" );

    ini["added.number"] = 456;

    std::cout << ini.save() << std::endl;
    std::cout << "All ok." << std::endl;
}
